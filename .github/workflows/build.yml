name: Publish to SPM

on:
  repository_dispatch:
    types: [trigger-publishSPM-workflow]  # Listen for trigger event from Workflow A
    
  workflow_dispatch:
    inputs:
      VERSION:
        description: 'SDK Version'
        required: false
        default: '1.0.58'

      URL:
        description: 'ZIP File Download URL'
        required: false
        default: 'https://cdn.imqa.io/release/sdk/ios/1.0.58/1.0.58_20250529_new.zip'

      ARCHIVE_NAME:
        description: 'Archive file name (e.g. app.zip)'
        required: false
        default: '1.0.58_20250529_new.zip'


jobs:
  publish:
    runs-on: publishSPM  # Update this to the appropriate environment

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: workflow  # ÊåáÂÆöÂàÜÊîØÂêç
      
      - name: üß∞ Install zip
        run: brew install zip

      - name: Create directory for downloaded artifacts
        run: mkdir -p ./downloaded  # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®

      - name: Download zip from remote server
        run: |
          curl -O "${{ github.event.client_payload.url || github.event.inputs.URL}}"
          unzip ${{ github.event.client_payload.archive_name || github.event.inputs.ARCHIVE_NAME }} -d ./extracted

      - name: Replace xcframework
        run: |
          set -e
          REPO_DIR="/Users/imqatest/Desktop/iOS/PublishSDKONSPM"  # Update the path to your repo directory
          DEST_DIR="$REPO_DIR/IMQACore/Frameworks"
          rm -rf "$DEST_DIR"/*  # Clear out the old xcframework
          cp -R ./extracted/* "$DEST_DIR"  # Copy new xcframework into repo

      - name: ‚ôªÔ∏è Zip all .xcframeworks
        run: |
          REPO_DIR="/Users/imqatest/Desktop/iOS/PublishSDKONSPM"  # Update the path to your repo directory
          DEST_DIR="$REPO_DIR/IMQACore/Frameworks"
          mkdir -p "$REPO_DIR"/zips
          for f in "$DEST_DIR"/*.xcframework; do
            name=$(basename "$f" .xcframework)
            zip -r "$REPO_DIR/zips/${name}.xcframework.zip" "$f"
          done

      - name: üßÆ Compute checksums
        id: checksums
        run: |
          REPO_DIR="/Users/imqatest/Desktop/iOS/PublishSDKONSPM"  # Update the path to your repo directory
          DEST_DIR="$REPO_DIR/IMQACore/Frameworks"
          echo "checksums=" >> $GITHUB_ENV
          for f in "$REPO_DIR"/zips/*.zip; do
            name=$(basename "$f" .xcframework.zip)
            checksum=$(swift package compute-checksum "$f")
            echo "$name=$checksum" >> $GITHUB_ENV
          done

      - name: üìù Update Package.swift
        run: |
          REPO_DIR="/Users/imqatest/Desktop/iOS/PublishSDKONSPM"  # Update the path to your repo directory
          DEST_DIR="$REPO_DIR/IMQACore/Frameworks"
          cd "$REPO_DIR"
          version=${{ github.event.client_payload.version || github.event.inputs.VERSION}}
          for f in "$REPO_DIR"/zips/*.zip; do
            name=$(basename "$f" .xcframework.zip)
            checksum=$(swift package compute-checksum "$f")
            sed -i '' "/name: \"$name\",/,/checksum:/ {
              s|url: \".*\"|url: \"https://github.com/${{ github.repository }}/releases/download/${version}/${name}.xcframework.zip\"|
              s|checksum: \".*\"|checksum: \"${checksum}\"|
            }" Package.swift
          done

      - name: üöÄ Commit updated Package.swift
        run: |
          REPO_DIR="/Users/imqatest/Desktop/iOS/PublishSDKONSPM"  # Update the path to your repo directory
          cd "$REPO_DIR"
          git add Package.swift
          git commit -m "build: update Package.swift for ${{ github.event.client_payload.version }} binary release"
          git tag -f ${{ github.event.client_payload.version }}
          git push origin main
          git push -f origin ${{ github.event.client_payload.version }}

      - name: üì¶ Upload release artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.client_payload.version }}
          files: /Users/imqatest/Desktop/iOS/PublishSDKONSPM/zips/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_COPY }}
